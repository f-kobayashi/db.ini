配列？＝「（""＋自分）！"]" 含む？」。
テーブル＝配列！作る。

配列：getarg＝「「全部！（自分！配列？）（（自分！1 読む）！配列？）本当」！なら「自分！1 読む」そうでなければ「自分」実行」。
テーブル：作る＝「ret＝自分！create。ret：フィールド名＝_rest！getarg。ret」。
テーブル：書く＝「自分！（_rest！getarg）put」。
テーブル：射影＝「｜;fs｜
　　fs=配列！作る。
　　_rest！「｜f｜
　　　　「｜n｜「（フィールド名！（n）読む）＝＝f」！なら「fs！（n）書く」実行」！（フィールド名！要素数？）繰り返す。
　　」それぞれ実行。
　　ret＝テーブル！（_rest）作る。
　　自分！「｜r｜a=配列！作る。fs！「｜n｜a！（r！（n）読む）書く」それぞれ実行。ret！（a）put」それぞれ実行。
」。

テーブル：選択＝「｜条件｜
　　ret＝テーブル！（フィールド名）作る。
　　自分！「｜r｜
　　　　「｜n｜
　　　　　　f＝フィールド名！（n）読む。
　　　　　　v＝r！（n）読む。
　　　　　　s＝""+f+"＝"+コード文字(0x22)+v+コード文字(0x22)+"。"。
　　　　　　（s）！実行。
　　　　」！（フィールド名！要素数？）繰り返す。
　　　　//条件が正しければ戻り値にrを設定
　　　　「（条件！実行）」！なら「ret！（r）書く」実行。
　　」それぞれ実行。
　　ret。
」。
テーブル：結合＝「｜t｜
　　「｜n｜f=自分：フィールド名！（n）読む。// 結合キーkの判別
　　　　「｜i｜f2＝t:フィールド名！（i）読む。
　　　　　　「f==f2」！なら「kf=f。kn=n。ki=i」実行。
　　　　」！（t：フィールド名！要素数？）繰り返す。
　　」！（自分：フィールド名！要素数？）繰り返す。

　　fn＝配列！作る。// 結合後のフィールド名の取得
　　自分：フィールド名！「｜f｜fn！（f）書く」それぞれ実行。
　　t：フィールド名！「｜f2｜
　　　　「f2！=kf」！なら「fn！（f2）書く」実行。
　　」それぞれ実行。

　　ret＝テーブル！（fn）作る。
　　自分！「｜r｜
　　　　kv＝r！（kn）読む。
　　　　t！「｜r2｜
　　　　　　kv2＝r2！（ki）読む。
　　　　　　「kv==kv2」！なら「
　　　　　　　　rr＝配列！作る。
　　　　　　　　「｜j｜ rr！（r！（j）読む）書く」！（自分：フィールド名！要素数？）繰り返す。
　　　　　　　　「｜i｜「i！＝ki」！なら「
　　　　　　　　　　rr！（r2！（i）読む）書く。
　　　　　　　　」実行。」！（t：フィールド名！要素数？）繰り返す。
　　　　　　　　ret！（rr）書く。
　　　　　　」実行。
　　　　」それぞれ実行。

　　」それぞれ実行。
　　ret。
」。
テーブル：ファイルから作る＝「｜fn｜
　　tf＝テキストファイル！（fn）作る。
　　dt＝tf！読む。
　　fld＝（dt！1 読む）！"," 分割。
　　ret＝テーブル！（fld）作る。
　　「｜i｜「i＞1」！なら「ret！（（dt！（i）読む）！"," 分割）書く。」実行。」！（dt！要素数？）繰り返す。
　　ret。
」。
テーブル：表示＝「
　　len＝（""+（自分！1 読む））！長さ？。
s=""。
　　lst＝リスト！（""+（自分：フィールド名））（「s=s+"-"」！（len*1.5）繰り返す）作る（len*11）400 大きさ。
　　lst！（自分）書く。
」。
テーブル：ファイル出力＝「｜fn｜
　　tf＝テキストファイル！（fn）作る。
　　tf！（配列！作る）全部書く。
ラベル！（自分：フィールド名！要素数？）作る。
//　　tf！（自分：フィールド名！"," 結合）書く。
　　自分！「｜r｜ tf！（r！"," 結合）書く」それぞれ実行。
」。

テーブル：最大値＝「
　　fieldName＝_rest!getarg　1 読む。
　　配列in配列＝自分！(fieldName)射影。
　　配列in配列to配列=配列！作る。
　　配列in配列！「｜n｜配列in配列to配列！（n！１　読む）書く。」それぞれ実行。
　　max=配列in配列to配列！１　読む.
　　配列in配列to配列！「｜n｜
　　　　「max<n」！なら「max=n」実行。
　　」それぞれ実行。

　　//テーブル！作る。をして、その要素として値を書く必要がある
　　ret=テーブル！(fieldName)作る。
　　ret!(max) 書く。
」。

テーブル：最小値＝「
　　fieldName＝_rest!getarg　1 読む。
　　配列in配列＝自分！(fieldName)射影。
　　配列in配列to配列=配列！作る。
　　配列in配列！「｜n｜配列in配列to配列！（n！１　読む）書く。」それぞれ実行。
　　min=配列in配列to配列！１　読む.
　　配列in配列to配列！「｜n｜
　　　　「min>n」！なら「min=n」実行。
　　」それぞれ実行。

　　//テーブル！作る。をして、その要素として値を書く必要がある
　　ret=テーブル！(fieldName)作る。
　　ret!(min) 書く。
」。

テーブル：合計値＝「
　　fieldName＝_rest!getarg　1 読む。
　　配列in配列＝自分！(fieldName)射影。
　　配列in配列to配列=配列！作る。
　　配列in配列！「｜n｜配列in配列to配列！（n！１　読む）書く。」それぞれ実行。
　　sum=0.
　　配列in配列to配列！「｜n｜
　　　　sum = sum + n。 
　　」それぞれ実行。
		
		
　　//テーブル！作る。をして、その要素として値を書く必要がある
　　ret=テーブル！(fieldName)作る。
　　ret!(sum) 書く。
」。

テーブル：平均値＝「
　　fieldName＝_rest!getarg　1 読む。
　　配列in配列＝自分！(fieldName)射影。
　　配列in配列to配列=配列！作る。
　　配列in配列！「｜n｜配列in配列to配列！（n！１　読む）書く。」それぞれ実行。
　　sum=0.
　　配列in配列to配列！「｜n｜
　　　　sum = sum + n。 
　　」それぞれ実行。
		
		ave = sum / (配列in配列to配列！要素数?)。
　　//テーブル！作る。をして、その要素として値を書く必要がある
　　ret=テーブル！(fieldName)作る。
　　ret!(ave) 書く。
」。

テーブル：分散＝「
　　fieldName＝_rest!getarg　1 読む。
　　配列in配列＝自分！(fieldName)射影。
　　配列in配列to配列=配列！作る。
　　配列in配列！「｜n｜配列in配列to配列！（n！１　読む）書く。」それぞれ実行。
　　sum=0.
		dev=0.
		disp=0.
　　配列in配列to配列！「｜n｜
　　　　sum = sum + n。 
　　」それぞれ実行。
		ave = sum / (配列in配列to配列！要素数?)。
		配列in配列to配列！「｜n｜
　　　　dev = dev + (((n)-(ave))*((n)-(ave)))。
　　」それぞれ実行。
		disp = dev/(配列in配列to配列！要素数?)。
　　//テーブル！作る。をして、その要素として値を書く必要がある
　　ret=テーブル！((fieldName)+"_分散")作る。
　　ret!(disp) 書く。
		ret.
」。

テーブル：標準偏差＝「
　　fieldName＝_rest!getarg　1 読む。
		sdev=0．
		disp=0.
　　 disp=自分！(fieldName)分散．
		//なんとかスマートにしたい
		disp = disp!(1)読む.
		disp = disp!(1)読む．
		sdev=(sqrt ( disp ) ).
		
　　ret=テーブル！((fieldName)+"_標準偏差")作る。
　　ret!(sdev) 書く。
」．

テーブル：度数＝「｜カウントしたいフィールド名；文字コード配列にする 文字列にする　キー達　値達　ret｜
	キー達＝配列！作る。
	値達=配列！作る.
	ret=テーブル！(カウントしたいフィールド名)"度数"作る。
	カウントしたいフィールド名の番号＝０．

	文字コード配列にする＝「｜str;ret｜
		ret=配列！作る。
		str!""分割「｜要素｜
			ret!(要素！文字コード)書く。
		」それぞれ実行。
		ret
	」。
	文字列にする＝「｜文字コード配列;ret｜
		ret=""。
		文字コード配列！「｜要素｜
			ret＝（ret！（（要素）！コード文字）連結）。
		」それぞれ実行。
		ret
	」。

	キー達：探す＝「｜キー；結果　文字コード配列の比較｜
		結果＝０。

		文字コード配列の比較＝「｜左　右｜
			(""+左)==(""+右)
		」。

		「｜番号｜
			「！（自分！（番号）読む）（キー）文字コード配列の比較」！なら「結果＝番号」実行。
		」！（自分！要素数？）繰り返す。
		結果。
	」。

	「｜番号｜
		「（フィールド名！（番号）読む）＝＝カウントしたいフィールド名」！なら「
			カウントしたいフィールド名の番号＝番号。
		」実行。
	」！（フィールド名！要素数？）繰り返す。

	自分！「｜要素；値　キー番号｜
		値＝（！（要素！（カウントしたいフィールド名の番号）読む)文字コード配列にする）。
		「（キー達！（値）探す）＝＝０」！なら「キー達！（値）書く。値達！０　書く。」実行。
		キー番号＝キー達！（値）探す。
		値達！（キー番号）（（値達！（キー番号）読む）＋１）上書き。
	」それぞれ実行。
	
	キー達！「｜要素｜
		//ラベル！（！（要素）文字列にする）作る。
	」それぞれ実行。
	「｜番号｜
		ret!(！(キー達！（番号）読む)文字列にする）（値達！（番号）読む）書く。
	」！（キー達！要素数？）繰り返す。

	ret.
」。

テーブル：小さい順＝「|並び替えたいフィールド名;quick ret res|

  並び替えたいフィールド名の番号＝０．
  「｜番号｜
    「（フィールド名！（番号）読む）＝＝並び替えたいフィールド名」！なら「
      並び替えたいフィールド名の番号＝番号。
    」実行。
  」！（フィールド名！要素数？）繰り返す。
  quick=「｜arr num ; ret n p left right v｜
  　　ret=arr。
  　　n＝arr！要素数？。
  　　「n＞1」！なら「
  　　　　p=arr！（n） 読む。
  　　　　left=配列！作る。
  　　　　right=配列！作る。
  　　　　「｜i｜
  　　　　　　v＝arr！（i）読む。
  　　　　　　「(v!(num)読む)<(p!(num)読む)」！なら「left！（v）書く」そうでなければ「right！（v）書く」実行。
  　　　　」！（n-1）繰り返す。

  　　　　ret＝配列！作る（！（left）(num)quick）（配列！（p）作る）（！（right）(num)quick）連結。
  　　」実行。
  　　ret。
  」。

  res=!(自分) (並び替えたいフィールド名の番号)quick.

  ret=テーブル！(フィールド名)作る。
  「|n|ret!(res!(n)読む)書く」！（res!要素数？）繰り返す。
  ret.
」。

テーブル：大きい順＝「|並び替えたいフィールド名;quick ret res|

  並び替えたいフィールド名の番号＝０．
  「｜番号｜
    「（フィールド名！（番号）読む）＝＝並び替えたいフィールド名」！なら「
      並び替えたいフィールド名の番号＝番号。
    」実行。
  」！（フィールド名！要素数？）繰り返す。
  quick=「｜arr num ; ret n p left right v｜
  　　ret=arr。
  　　n＝arr！要素数？。
  　　「n＞1」！なら「
  　　　　p=arr！（n） 読む。
  　　　　left=配列！作る。
  　　　　right=配列！作る。
  　　　　「｜i｜
  　　　　　　v＝arr！（i）読む。
  　　　　　　「(v!(num)読む)>(p!(num)読む)」！なら「left！（v）書く」そうでなければ「right！（v）書く」実行。
  　　　　」！（n-1）繰り返す。

  　　　　ret＝配列！作る（！（left）(num)quick）（配列！（p）作る）（！（right）(num)quick）連結。
  　　」実行。
  　　ret。
  」。

  res=!(自分) (並び替えたいフィールド名の番号)quick.

  ret=テーブル！(フィールド名)作る。
  「|n|ret!(res!(n)読む)書く」！（res!要素数？）繰り返す。
  ret.
」。

テーブル：中央値＝「
　fieldName＝_rest!getarg　1 読む。
　tmp_arr＝自分！(fieldName)　大きい順。
　two_arr＝tmp_arr！(fieldName)射影。
　change_arr=配列！作る。
　two_arr！「｜n｜change_arr！（n！１　読む）書く。」それぞれ実行。
    harf=(change_arr！要素数? )/2.
    tmp=change_arr！(harf)読む．
    tmp2=change_arr！((harf)+1)読む．
	「(harf)%2 !=0 」！なら「median=tmp」そうでなければ「median=(((tmp)+(tmp2))/2)」実行.
　//テーブル！作る。をして、その要素として値を書く必要がある
　ret=テーブル！"中央値"作る。
　ret!(median) 書く。
」．

テーブル:第１四分位数＝「
　fieldName＝_rest!getarg　1 読む。
　tmp_arr＝自分！(fieldName)　小さい順。
　two_arr＝tmp_arr！(fieldName)射影。
　front_arr＝配列！作る。
		back_arr＝配列！作る．
　two_arr！「｜n m｜
		「((two_arr！要素数?)%2) == 0」!なら
		「
			「(m) <=((two_arr！要素数?)/2)」！なら
			「front_arr! (n) 書く」そうでなければ
			「back_arr! (n) 書く」実行．
			」そうでなければ
		「
			「(m) <=((two_arr！要素数?)/2)」！なら
			「front_arr! (n) 書く」そうでなければ
			「(m) ==(((two_arr！要素数?)/2)+0.5)」なら「」そうでなければ
			「back_arr! (n) 書く」実行．
			」実行．
			
	」それぞれ実行。
	
    uppar_arr＝テーブル！(fieldName) 作る．
   	front_arr！「｜n｜
   		uppar_arr！(n)書く．
   	」それぞれ実行．
    
    qua1 = uppar_arr! (fieldName) 中央値．
　ret=テーブル！"第1四分位数"作る。
　ret!(qua1) 連結。
」．

テーブル:第3四分位数＝「
　fieldName＝_rest!getarg　1 読む。
　tmp_arr＝自分！(fieldName)　小さい順。
　two_arr＝tmp_arr！(fieldName)射影。
　front_arr＝配列！作る。
	  back_arr＝配列！作る．
　two_arr！「｜n m｜
		「((two_arr！要素数?)%2) == 0」!なら
		「
			「(m) <=((two_arr！要素数?)/2)」！なら
			「front_arr! (n) 書く」そうでなければ
			「back_arr! (n) 書く」実行．
			」そうでなければ
		「
			「(m) <=((two_arr！要素数?)/2)」！なら
			「front_arr! (n) 書く」そうでなければ
			「(m) ==(((two_arr！要素数?)/2)+0.5)」なら「」そうでなければ
			「back_arr! (n) 書く」実行．
			」実行．
			
	」それぞれ実行。
	
    lower_arr＝テーブル！(fieldName) 作る．
   	back_arr！「｜n｜
   		lower_arr！(n)書く．
   	」それぞれ実行．
    qua3 = lower_arr! (fieldName) 中央値．
　ret=テーブル！"第3四分位数"作る。
　ret!(qua3) 連結。
」．

テーブル：重複＝「
	fieldName＝_rest!getarg　1 読む。
	two_arr＝自分！(fieldName)　射影。
　arr=配列！作る。
	「(arr!要素数?)==0」!なら「flag = true」実行.
　two_arr！「｜n｜
			arr!「｜l ｜
				「(l) == （n！１　読む）」!なら　
				「flag=false」実行．
			」それぞれ実行。
			「flag == true」!なら
			「arr！（n！１　読む）書く。」実行．
			flag = true.
	」それぞれ実行．
	ret = テーブル！(fieldName)作る．
	arr！「｜n｜
   		ret！(n)書く．
   	」それぞれ実行．
   	ret.
」．

テーブル：箱ひげグラフ＝「｜f1 f2|
	original=自分．
	f1_arr=自分!(f1) 重複．
	f1_num＝０．
	f2_num＝０．
	two_arr=配列!作る．
	tmp_arr=配列!作る.
	param_arr=配列!作る．
	「｜番号｜
		「（フィールド名！（番号）読む）＝＝ (f1)」！なら
		「f1_num＝番号。」そうでなければ
		「（フィールド名！（番号）読む）＝＝ (f2)」なら
		「f2_num＝番号。」実行。
	」！（フィールド名！要素数？）繰り返す。
	

	f1_arr！「|n|
		自分！「| val count |
			「(val!(f1_num)読む) == (n!1 読む)」!なら
			「tmp_arr！(val)書く」実行．
		」それぞれ実行．
			two_arr!(tmp_arr)書く．
			tmp_arr=配列!作る.
	」それぞれ実行．
	
	two_arr!「| val count ;field_arr max qua3 qua2 qua1 min tmp_arr2|
		field_arr=配列！作る．
		「| count |
				field_arr!(count)書く．
		」！（フィールド名！要素数？）繰り返す。
		tmp_ret = テーブル！(field_arr) 作る.
		val!「| value |
			tmp_ret ! (value)書く．
		」それぞれ実行．
		
		max = tmp_ret!(f2_num)最大値．
		qua3 = tmp_ret!(f2_num)第3四分位数．
		qua2 = tmp_ret!(f2_num)中央値．
		qua1 = tmp_ret!(f2_num)第1四分位数．
		min = tmp_ret!(f2_num)最小値．
		
		tmp_arr2 = 配列!(max!1 読む)(qua3!1 読む)(qua2!1 読む)(qua1!1 読む)(min!1 読む)作る．
		param_arr!(tmp_arr2)書く．
			
	」それぞれ実行.
	
	//ここからグラフ描画
	かめた=タートル!作る.　//消える．
	xline_s=かめた! 10 歩く 図形を作る．
	xline_l=かめた!  50 歩く 図形を作る．
	y軸ラベル＝ラベル．
	x軸ラベル＝ラベル．
	x_s=45.
	x_l=25.
	x = 50.
	z=0.
	start=0.
	end=0.
	
	param_arr!「｜data_arr  countA;ly1 ly2 sy1 sy2 min｜
		data_arr!「｜param countB｜．
			「どれか!(countB == 1 )(countB == 5)本当」！なら
			「xline_s！(x_s) ((param! 1 読む)*3) 位置 作る .
				「(countB) == 1 」！なら「sy1 = ((param! 1 読む)*3) 」実行．
				「(countB) == 5 」！なら「sy2 = ((param! 1 読む)*3) .
						「どれか!(sy2 < min)(countA == 1)本当」! なら「z = (sy2)/3 *0.9」実行．
				」実行．
			」そうでなければ
			「xline_l！(x_l) ((param! 1 読む)*3) 位置  作る.
				「(countB) == 2 」！なら「ly1 = ((param! 1 読む)*3) 」実行．
				「(countB) == 4」！なら「ly2 = ((param! 1 読む)*3) 」実行．
			」実行．
			かめた! ペンなし (x) (sy1) 位置 ペンあり (x) (ly1) 位置 図形を作る．
			かめた! ペンなし (x_l) (ly1) 位置 ペンあり (x_l) (ly2) 位置 図形を作る．
			かめた! ペンなし ((x_l)+50) (ly1) 位置 ペンあり ((x_l)+50) (ly2) 位置 図形を作る．
			かめた! ペンなし (x) (ly2) 位置 ペンあり (x) (sy2) 位置 図形を作る．
		」それぞれ実行．
		x軸ラベル! (f1_arr!(countA)読む) 作る 8 文字サイズ (x) -20 位置．
		ラベル！（min）作る．
		x=(x)+70.
		x_s=(x_s)+70.
		x_l=(x_l)+70.
	」それぞれ実行．
	
	「|n|
		y軸ラベル! (start) 作る 8 文字サイズ -20  (z) 位置．
		「(n) != 11」!なら「かめた！ペンなし　0 (z) 位置 ペンあり (5) (z) 位置．」実行.
		z = z+30.
		start = (start) + 10. 
		」！ 11 繰り返す．
	
	x軸線＝かめた！ペンなし　0　0　位置．
	x軸線！ペンあり　(（f1_arr！要素数？）*70) 　０　移動する 図形を作る ．
	y軸線＝かめた！ペンなし　0　0　位置.
	y軸線！ペンあり　0 300 移動する 図形を作る．
	
	かめた！消える．
	ret=テーブル！作る．
	ret.
」．

テーブル：折れ線グラフ＝「|;x_range y_range |
	fieldName1＝_rest!getarg　1 読む。
	fieldName2＝_rest!getarg　2 読む。
	two_arrA＝自分！(fieldName1)射影。
	two_arrB＝自分！(fieldName2)射影。
	かめた=タートル！作る．
	丸＝かめた！5　円　図形を作る ．
	線＝かめた！ペンなし 0 -200 移動する　ペンあり．
	y軸ラベル＝ラベル．
	x軸ラベル＝ラベル．
	tmp=0.
	x=50.
	z=50.
	y=-200.
	W=0.
	y_val = 0.
	change_arrA=配列！作る。
	two_arrA！「｜n｜change_arrA！（n！１　読む）書く。」それぞれ実行。
	
	max=change_arrA！１　読む.
	change_arrA！「｜n｜
　「max<n」！なら「max=n」実行。
	」それぞれ実行。
	
	「全部!(max > 0 )(max < 100)本当」!なら「
		「
				y軸ラベル! (y_val)  作る 8　文字サイズ　-20　(y) 位置.
			  かめた！ペンなし　0 (y) 位置 ペンあり (5) (y) 位置．
				y_val=(y_val) + 10.
				y = (y)+50.
		」! (((max)/10)+1) 繰り返す．
	」実行。
	
	change_arrA！「｜n l｜．
		「l == 1」!なら「線！ペンなし (z) (((n)*5)-200)  位置　ペンあり.」そうでなければ「線！(z) (((n)-(tmp))*5) 移動する．」実行．
		丸！(x) (((n)*5)-200) 位置 作る．
		x=x+50.
		tmp=n.
		y=y+50.
	」それぞれ実行。
		
	x=50.
	change_arrB=配列！作る。
	two_arrB！「｜n｜change_arrB！（n！１　読む）書く。」それぞれ実行。
		change_arrB！「｜n｜
			x軸ラベル！(n)   作る　8　文字サイズ　(x) -220 　位置．
			x=x+50.
　」それぞれ実行。

	x軸線＝かめた！ペンなし　0　-200　位置．
	x軸線！ペンあり　(((change_arrA！要素数？)+ 1)*50) 　０　移動する 図形を作る．
	y軸線＝かめた！ペンなし　0　-200　位置.
	y軸線！ペンあり　0 (y) 移動する 図形を作る．
	
	ret=自分．
	かめた！消える．
」．

//レコードごとの値で棒グラフを書く
テーブル：折れ線グラフ2＝「|;_a _x _y y_val |
tmp_arr = _rest!getarg。
data_arr = 配列！作る。
_a=0.
_x=50.
_y=0.
y_val = 0.
tmp_arr!「｜n｜_a=自分！(n) 射影。data_arr！（_a! 1 読む）書く。」それぞれ実行。
かめた=タートル！作る．
_color = 色！ランダムに作る。
丸＝かめた！5　円　(_color)　図形を作る ．
線＝かめた！ 作る ペンなし  50 0 位置 ．
y軸ラベル＝ラベル．
x軸ラベル＝ラベル．
data_arr!「| n |  丸！ (_x) (((n! 1 読む)*5)-0) 位置 作る ．線！(_x) (((n! 1 読む)*5)-0) 位置　ペンあり　図形を作る。 _x=(_x)+50.」それぞれ実行。
_x=50.
tmp_arr!「| n |  	x軸ラベル！(n)   作る　12　文字サイズ　(_x) -20 　位置．_x=(_x)+50.」それぞれ実行。

	max=(data_arr！１　読む)! 1　読む.
	data_arr！「｜n｜
　「max<(n! 1 読む)」！なら「max=(n! 1 読む)」実行。
	」それぞれ実行。
	
	「全部!(max > 0 )(max < 100)本当」!なら「
		「
				y軸ラベル! (y_val)  作る 8　文字サイズ　-20　(_y) 位置.
			  かめた！ペンなし　0 (_y) 位置 ペンあり (5) (_y) 位置 図形を作る．
				y_val=(y_val) + 10.
				_y = (_y)+50.
		」! (((max)/10)+2) 繰り返す．
	」実行。

	x軸線＝かめた！ペンなし　0　0　位置．
	x軸線！ペンあり　(((tmp_arr！要素数？)+ 1)*50) 　０　移動する 図形を作る．
	y軸線＝かめた！ペンなし　0　0　位置.
	y軸線！ペンあり　0 (_y) 移動する 図形を作る．

線！消える。
かめた！消える．
」．

テーブル：棒グラフ＝「|; _x _y y_val  |
fieldName1＝_rest!getarg　1 読む。
fieldName2＝_rest!getarg　2 読む。
tmp_arr = 自分！(fieldName2)　射影。 
title_arr = 自分！(fieldName1)　射影。

data_arr = 配列！作る。
_x=50.
_y=0.
y_val = 0.
tmp_arr!「｜n｜data_arr！（n! 1 読む）書く。」それぞれ実行。
かめた=タートル！作る．
y軸ラベル＝ラベル．
x軸ラベル＝ラベル．
data_arr!「| n |  四角=かめた!　ペンなし　((_x)-5) 0 位置　ペンあり 90　左回り (((n)*5)-0) 歩く 90 右回り 10 歩く 90 右回り (((n)*5)-0) 歩く 90 左回り　図形を作る。 _x=(_x)+50.」それぞれ実行。
_x=50.
title_arr!「| n |  	x軸ラベル！(n! 1 読む)   作る　12　文字サイズ　(_x) -20 　位置．_x=(_x)+50.」それぞれ実行。

	max=data_arr！１　読む.
	data_arr！「｜n｜
　「max<(n)」！なら「max=(n)」実行。
	」それぞれ実行。
	
	「全部!(max > 0 )(max < 100)本当」!なら「
		「
				y軸ラベル! (y_val)  作る 8　文字サイズ　-20　(_y) 位置.
			  かめた！ペンなし　0 (_y) 位置 ペンあり (5) (_y) 位置 図形を作る．
				y_val=(y_val) + 10.
				_y = (_y)+50.
		」! (((max)/10)+2) 繰り返す．
	」実行。

	x軸線＝かめた！ペンなし　0　0　位置．
	x軸線！ペンあり　(((tmp_arr！要素数？)+ 1)*50) 　０　移動する 図形を作る．
	y軸線＝かめた！ペンなし　0　0　位置.
	y軸線！ペンあり　0 (_y) 移動する 図形を作る．

かめた！消える．
」．

テーブル：散布図＝「|;_a _x _y _x_val _y_val _ajast|
fieldName1＝_rest!getarg　1 読む。
fieldName2＝_rest!getarg　2 読む。
tmp_arr = 自分！(fieldName1)　(fieldName2)　射影。 
_a=0.
_x=0.
_y=0.
_y_val = 0.
_x_val = 0.
_ajast = 2.5.
かめた=タートル！作る．
丸＝かめた！5　円　(赤)　図形を作る ．
線＝かめた！ 作る ペンなし  50 0 位置 ．
y軸ラベル＝ラベル．
x軸ラベル＝ラベル．
Xタイトル＝ラベル！(fieldName1) 作る 50 -250 位置。
Yタイトル＝ラベル！(fieldName2) 作る -250 50  位置。

tmp_arr!「| n |  丸！(((n! 1 読む)*5)-200+(_ajast)) (((n! 2 読む)*5)-200+(_ajast)) 位置 作る. 」それぞれ実行.
	max=(tmp_arr！1 読む)! 1 読む.
	tmp_arr！「｜n｜
　「max<(n! 1 読む)」！なら「max=(n! 1 読む)」実行。
	」それぞれ実行。
	
	「全部!(max > 0 )(max < 100)本当」!なら「
		「
				y軸ラベル! (_y_val)  作る 8 文字サイズ -220 (-200+(_y)) 位置.
			  かめた！ペンなし　-200 (-200+(_y)) 位置 ペンあり -195 (-200+(_y)) 位置 図形を作る．
				_y_val=(_y_val) + 10.
				_y = (_y)+50.
		」! (((max)/10)+2) 繰り返す．
	」実行。
	
	max=(tmp_arr！1 読む)! 2 読む.
	tmp_arr！「｜n｜
　「max<(n! 2 読む)」！なら「max=(n! 2 読む)」実行。
	」それぞれ実行。
	
	「全部!(max > 0 )(max < 100)本当」!なら「
		「
				x軸ラベル! (_x_val)  作る 8 文字サイズ (-200+(_x)) -220 位置.
			  かめた！ペンなし (-200+(_x)) -200 位置 ペンあり (-200+(_x)) -195 位置 図形を作る．
				_x_val=(_x_val) + 10.
				_x = (_x)+50.
		」! (((max)/10)+2) 繰り返す．
	」実行。

	x軸線＝かめた！ペンなし　-200　-200　位置．
	x軸線！ペンあり　500 　0　移動する 図形を作る．
	y軸線＝かめた！ペンなし　-200　-200　位置.
	y軸線！ペンあり　0 500 移動する 図形を作る．

線！消える。
かめた！消える．
」．

//pro_list=projection_list
テーブル：レコード平均＝「
ダミー＝自分!create。
ダミー！クリア。
field_list = _rest!getarg.
pro_arr = 配列！作る。
tmp_arr = 配列！作る。
ave_arr = 配列 ! 作る。
_range = field_list!要素数？。
_count = 1.
_ave=0.
_sum=0.
field_list！「｜ｎ i｜　
	tmp_arr = 自分！ (n) 射影。
	「i !=1」!なら「
	　pro_arr!「| m o | m! (_count) ((tmp_arr! (o) 読む) ! 1 読む)挿入」それぞれ実行。
	」そうでなければ「
	　pro_arr = tmp_arr.
	」実行する。
	_count = (_count) + 1.
	」それぞれ実行。
	pro_arr!「| n |  
	　n!「|n| _sum=(_sum)+(n)」それぞれ実行。
	　_ave = (_sum)/(_range).
	　_sum = 0.
	　ave_arr!(round(_ave)) 書く。
	 」それぞれ実行。
	 自分！「｜要素｜
			ダミー！（要素！作る）put。
		」それぞれ実行。
	(ダミー：フィールド名)! "平均"　書く。
	 ave_arr！「| n i |　
	 　(ダミー！(i) 読む)! (n) put。
	 」それぞれ実行。
	 ダミー。
」。

