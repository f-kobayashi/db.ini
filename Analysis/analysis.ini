//データ分析機能の定義
テーブル：最大値＝「| f1 flag |
　　//fieldName＝_rest!getarg　1 読む。
　　//ラベル！(f1) 作る．
　　two_array＝自分！(f1) 射影。
　　data_array=配列！作る。
　　two_array！「｜n｜data_array！（n！１　読む）書く。」それぞれ実行。
　　max=data_array！１　読む.
　　data_array！「｜n｜
　　　　「max<n」！なら「max=n」実行。
　　」それぞれ実行。
　　テーブル:_MAX = max．
　　//テーブル！作る。をして、その要素として値を書く必要がある
　「flag != "true"」！なら「
　　自分：分析結果！(配列！"最大値" (max) 作る) 書く．」実行．
　　ret=テーブル！((f1)+"_最大値") 作る。
　　ret!(max) 書く。
」。

テーブル：最小値＝「| f1 flag |
　　//fieldName＝_rest!getarg　1 読む。
　　two_array＝自分！(f1) 射影。
　　data_array=配列！作る。
　　two_array！「｜n｜data_array！（n！１　読む）書く。」それぞれ実行。
　　min=data_array！１　読む.
　　data_array！「｜n｜
　　　　「min>n」！なら「min=n」実行。
　　」それぞれ実行。
　　テーブル:_MIN = min．
　　//テーブル！作る。をして、その要素として値を書く必要がある
　「flag != "true"」！なら「
　　自分：分析結果！(配列！"最小値" (min) 作る) 書く．」実行．
　　ret=テーブル！((f1)+"_最小値") 作る。
　　ret!(min) 書く。
」。

テーブル：最頻値＝「| f1 |
　freq_arr=自分！(f1) 度数。
　max=freq_arr!"度数" 最大値 値読み出し。
　mode=配列！作る。
　ret=テーブル！((f1)+"_最頻値") "度数" 作る。
　freq_arr！「| val cnt |
　　「(val!2 読む) == max」!なら
　　「ret!(freq_arr!(cnt) 読む)書く」実行。
　」それぞれ実行。
　ret。
」。

テーブル：合計値＝「| f1 flag |
　　//fieldName＝_rest!getarg　1 読む。
　　//配列in配列＝自分！(fieldName)射影。
　　two_array＝自分！(f1) 射影。
　　data_array=配列！作る。
　　two_array！「｜n｜data_array！（n！１　読む）書く。」それぞれ実行。
　　sum=0.
　　data_array！「｜n｜
　　　　sum = sum + n。
　　」それぞれ実行。
　　//テーブル！作る。をして、その要素として値を書く必要がある．
　「flag != "true"」！なら「
　　自分：分析結果！(配列！"合計値" (sum) 作る) 書く．」実行．
　　ret=テーブル！((f1)+"_合計値") 作る。
　　ret!(配列！(sum) 作る) 書く。
」。

テーブル：平均値＝「| f1 flag |
　　//fieldName＝_rest!getarg　1 読む。
　　//配列in配列＝自分！(fieldName)射影。
　　two_array＝自分！(f1) 射影。
　　data_array=配列！作る。
　　two_array！「｜n｜data_array！（n！１　読む）書く。」それぞれ実行。
　　sum=0.
　　data_array！「｜n｜
　　　　sum = sum + n。
　　」それぞれ実行。
　　ave = sum / (data_array！要素数?)。
　　//テーブル！作る。をして、その要素として値を書く必要がある
　「flag != "true"」！なら「
　　自分：分析結果！(配列！"平均値" (ave) 作る) 書く．」実行．
　　ret=テーブル！((f1)+"_平均値") 作る。
　　ret!(ave) 書く。
」。

テーブル：偏差＝「| f1 |
　
　ave=((自分！(f1) 平均値)!1 読む)! 1 読む。
　f1_arr=自分！(f1) 射影。
　dev_arr=配列！作る。
　f1_arr！「｜n｜
    dev_arr!((n！1 読む)-ave) 書く
  」それぞれ実行。
　ret=テーブル！((f1)+"_偏差") 作る。
　dev_arr！「| val |
　　ret!(val) 書く。
　」それぞれ実行。
　ret。
」。


テーブル：分散＝「| f1 flag |
　//fieldName＝_rest!getarg　1 読む。
　//配列＝自分！(fieldName)射影。
　two_array＝自分！(f1) 射影。
　data_array=配列！作る。
　two_array！「｜n｜data_array！（n！１　読む）書く。」それぞれ実行。
　sum=0.
　dev=0.
　disp=0.
　data_array！「｜n｜
　　sum = sum + n。
　」それぞれ実行。
　ave = sum / (data_array！要素数?)。
　data_array！「｜n｜
　　dev = dev + (((n)-(ave))*((n)-(ave)))。
　」それぞれ実行。
　disp = dev/(data_array！要素数?)。
　//テーブル！作る。をして、その要素として値を書く必要がある
 「flag != "true"」！なら「
　自分：分析結果！(配列！"分散" (disp) 作る) 書く．」実行．
　ret=テーブル！((f1)+"_分散") 作る。
　ret!(disp) 書く。
		ret.
」。

テーブル：共分散＝「|f1 f2|
　f1_dev_arr=自分！(f1) 偏差。　
　f2_dev_arr=自分！(f2) 偏差。
　total＝0。
　f1_dev_arr！「| val cnt |
　　total=total+((val!1 読む)*((f2_dev_arr! (cnt) 読む)!1 読む))。
　」それぞれ実行。

　cav=total/(f1_dev_arr!要素数?)。
　ret=テーブル！((f1)+"&"+(f2)+"_共分散") 作る。
　ret!(cav)　書く。
　ret。
」。

テーブル：相関係数＝「| f1 f2 |
　cav=自分！(f1) (f2) 共分散 値読み出し。
　st_dev1=自分！(f1) 標準偏差 値読み出し。
　st_dev2=自分！(f2) 標準偏差 値読み出し。
　cor=cav/(st_dev1*st_dev2)。
 ret=テーブル！((f1)+"&"+(f2)+"_相関係数") 作る。
 ret!(cor)　書く。
 ret。
」。


テーブル：標準偏差＝「| f1 flag |
　　//fieldName＝_rest!getarg　1 読む。
　　sdev=0．
　　disp=0.
　　disp=自分！(f1) "true" 分散．
		//なんとかスマートにしたい
		　disp = disp!(1)読む.
		　disp = disp!(1)読む．
		　sdev=(sqrt ( disp ) ).
		「flag != "true"」！なら「
	 　自分：分析結果！(配列！"標準偏差" (sdev) 作る) 書く．」実行．
	 　ret=テーブル！((f1)+"_標準偏差") 作る。
　　ret!(sdev) 書く。
」．

テーブル：中央値＝「| f1 flag |
　　//fieldName＝_rest!getarg　1 読む。
　　tmp_arr＝自分！(f1)　大きい順。
　　two_arr＝tmp_arr！(f1)射影。
　　data_arr=配列！作る。
　　two_arr！「｜n｜data_arr！（n！１　読む）書く。」それぞれ実行。
   　 harf=(data_arr！要素数? )/2.
   　 tmp=data_arr！(harf)読む．
    　tmp2=data_arr！((harf)+1)読む．
	　「(harf)%2 !=0 」！なら「median=tmp」そうでなければ「median=(((tmp)+(tmp2))/2)」実行.
　　//テーブル！作る。をして、その要素として値を書く必要がある
　「flag != "true"」！なら「
　　自分：分析結果！(配列！"中央値" (median) 作る) 書く．」実行．
　　ret=テーブル！((f1)+"_中央値") 作る。
　　ret!(median) 書く。
」．

テーブル:第１四分位数＝「| f1 flag |
　//fieldName＝_rest!getarg　1 読む。
　tmp_arr＝自分！(f1)　小さい順。
　two_arr＝tmp_arr！(f1)射影。
　front_arr＝配列！作る。
		back_arr＝配列！作る．
　two_arr！「｜n m｜
　「((two_arr！要素数?)%2) == 0」!なら
　　「
　　　「(m) <=((two_arr！要素数?)/2)」！なら
　　　「front_arr! (n) 書く」そうでなければ
　　　「back_arr! (n) 書く」実行．
　　」そうでなければ
　　「
　　　「(m) <=((two_arr！要素数?)/2)」！なら
　　　「front_arr! (n) 書く」そうでなければ
　　　「(m) ==(((two_arr！要素数?)/2)+0.5)」なら「」そうでなければ
　　　「back_arr! (n) 書く」実行．
　　」実行．
　」それぞれ実行。

　uppar_arr＝テーブル！(f1) 作る．
　front_arr！「｜n｜
　　uppar_arr！(n)書く．
　」それぞれ実行．

  qua1 = uppar_arr! (f1) "true" 中央値．
　「flag != "true"」！なら「
　自分：分析結果！(配列！"第1四分位数" (((qua1)！1 読む)！1 読む) 作る) 書く．」実行．
　ret=テーブル！((f1)+"_第1四分位数") 作る。
　ret!(qua1) 連結。
」．

テーブル:第3四分位数＝「| f1 flag |
　//fieldName＝_rest!getarg　1 読む。
　tmp_arr＝自分！(f1)　小さい順。
　two_arr＝tmp_arr！(f1)射影。
　front_arr＝配列！作る。
　back_arr＝配列！作る．
　two_arr！「｜n m｜
		「((two_arr！要素数?)%2) == 0」!なら
		「
			「(m) <=((two_arr！要素数?)/2)」！なら
			「front_arr! (n) 書く」そうでなければ
			「back_arr! (n) 書く」実行．
			」そうでなければ
		「
			「(m) <=((two_arr！要素数?)/2)」！なら
			「front_arr! (n) 書く」そうでなければ
			「(m) ==(((two_arr！要素数?)/2)+0.5)」なら「」そうでなければ
			「back_arr! (n) 書く」実行．
			」実行．

	」それぞれ実行。

    lower_arr＝テーブル！(f1) 作る．
   	back_arr！「｜n｜
   		lower_arr！(n)書く．
   	」それぞれ実行．
  qua3 = lower_arr! (f1) "true" 中央値．
　「flag != "true"」！なら「
	自分：分析結果！(配列！"第3四分位数" (((qua3)！1 読む)！1 読む) 作る) 書く．」実行．
	ret=テーブル！((f1)+"_第3四分位数") 作る。
	ret!(qua3) 連結。
」．

テーブル：度数＝「｜f1 min max 階級幅；文字コード配列にする 文字列にする　キー達　値達　ret｜
	キー達＝配列！作る。
	値達=配列！作る.
	f1の番号＝０．
  f1_arr=自分!(f1) 射影。
  階級=配列！作る。
　カウント=配列！作る。
　「階級幅 != undef」!なら「
　　sum=max-min.
　　階級数=round(sum/階級幅)。
　　「全部！(max < 1) (max > 0)　本当」！なら「
　　　digit=ceil(log(abs(max))).
　　」そうでなければ「
　　　digit=1。
　　」実行。
　　ret=テーブル！"階級" "度数"作る。
　　「| n |
　　　//「n!=(階級数)」！なら「
　　　　階級!(配列! ((min+階級幅*(n-1))+("以上~"+(min+階級幅*n)+"未満")) 作る) 書く。
　　　//」そうでなければ「
　　　　//階級!(配列! ((min+階級幅*(n-1))+("~"+(min+階級幅*n))) 作る) 書く。
　　　//」実行。
　　　(階級!(n) 読む)! 0 書く。
　　　「n==1」！なら「カウント!(配列！(min+階級幅*(n-1)) 作る) 書く。」そうでなければ「カウント!(配列！(min+階級幅*(n-1)) 作る) 書く。」実行。
　　」！(階級数) 繰り返す。

　　f1_arr!「| n i |
　　　カウント！「| m j |
　　　　　//ラベル！((m!1　読む)+" ") 作る。
　　　　「全部！(((m!1 読む) <= (n!1 読む))) (((m!1 読む)+階級幅) > (n!1 読む)) 本当」!なら「
　　　　　(階級！(j) 読む)! 2  (((階級！(j) 読む)! 2 読む)+1) 上書き。
　　　　」実行。
　　　」それぞれ実行。
　　」それぞれ実行。
　　階級!「| n |
　　　ret!(n) 書く。
　　」それぞれ実行。
　」そうでなければ「
　　ret=テーブル！(f1) "度数" 作る。
　　文字コード配列にする＝「｜str;ret｜
　　　ret=配列！作る。
　　　str!""分割「｜要素｜
　　　　ret!(要素！文字コード)書く。
　  　」それぞれ実行。
  　　ret。
　　」。
　　文字列にする＝「｜文字コード配列;ret｜
　　　ret=""。
　　　文字コード配列！「｜要素｜
　　　　ret＝（ret！（（要素）！コード文字）連結）。
  　　」それぞれ実行。
  　　ret。
　　」。

　　キー達：探す＝「｜キー；結果　文字コード配列の比較｜
　　　結果＝０。

　　　文字コード配列の比較＝「｜左　右｜
　　　　(""+左)==(""+右)
　　　」。

　　　「｜番号｜
			　「！（自分！（番号）読む）（キー）文字コード配列の比較」！なら「結果＝番号」実行。
	　　」！（自分！要素数？）繰り返す。
	　　結果。
	　」。
　　「｜番号｜
  　　「（フィールド名！（番号）読む）＝＝f1」！なら「
  　  　f1の番号＝番号。
  　　」実行。
　　」！（フィールド名！要素数？）繰り返す。

　　自分！「｜要素；値　キー番号｜
　 　 値＝（！（要素！（f1の番号）読む)文字コード配列にする）。
　  　「（キー達！（値）探す）＝＝０」！なら「キー達！（値）書く。値達！０　書く。」実行。

　  　キー番号＝キー達！（値）探す。
　  　値達！（キー番号）（（値達！（キー番号）読む）＋１）上書き。
　　」それぞれ実行。

　　キー達！「｜要素｜
　 　 //ラベル！（！（要素）文字列にする）作る。
　　」それぞれ実行。
　　「｜番号｜
　　　ret!(！(キー達！（番号）読む)文字列にする）（値達！（番号）読む）書く。
　　」！（キー達！要素数？）繰り返す。
　」実行。
 ret。
」。


テーブル：度数分布表＝「| f1 min max 階級幅 |

　「階級幅!=undef」!なら「
　　freq=自分！(f1) (min) (max) (階級幅) 度数。
　　sum=0.
　　freq！「| n |
　　　sum=sum+(n！2 読む).
　　」それぞれ実行．

　　freq！「| n |
　　　n！((n！2 読む)/sum)　書く.
　　」それぞれ実行．
　　ret=テーブル！"階級" "度数" "相対度数" 作る。
　　freq！「| n |
　　　ret！(n) 書く．
　　」それぞれ実行．
　」そうでなければ「
　　freq=自分！(f1) 度数。
　　sum=0.
　　freq！「| n |
　　　sum=sum+(n！2 読む).
　　」それぞれ実行．
　　freq！「| n |
　　　n！((n！2 読む)/sum)　書く.
　　」それぞれ実行．
　　ret=テーブル！(f1) "度数" "相対度数" 作る。
　　freq！「| n |
　　　ret！(n) 書く．
　　」それぞれ実行．
　」実行。
　ret。
」．

テーブル：件数＝「|;ret|
　ret=テーブル!"件数" 作る。
　ret!(配列！(自分！要素数？)作る) 書く。
　ret。
」。
