//データ分析機能の定義

テーブル：最大値＝「| f1 flag |
　　//fieldName＝_rest!getarg　1 読む。
　　//ラベル！(f1) 作る．
　　two_array＝自分！(f1) 射影。
　　data_array=配列！作る。
　　two_array！「｜n｜data_array！（n！１　読む）書く。」それぞれ実行。
　　max=data_array！１　読む.
　　data_array！「｜n｜
　　　　「max<n」！なら「max=n」実行。
　　」それぞれ実行。
　　テーブル:_MAX = max．
　　//テーブル！作る。をして、その要素として値を書く必要がある
　「flag != "true"」！なら「
　　自分：分析結果！(配列！"最大値" (max) 作る) 書く．」実行．
　　ret=テーブル！((f1)+"_最大値") 作る。
　　ret!(max) 書く。
」。

テーブル：最小値＝「| f1 flag |
　　//fieldName＝_rest!getarg　1 読む。
　　two_array＝自分！(f1) 射影。
　　data_array=配列！作る。
　　two_array！「｜n｜data_array！（n！１　読む）書く。」それぞれ実行。
　　min=data_array！１　読む.
　　data_array！「｜n｜
　　　　「min>n」！なら「min=n」実行。
　　」それぞれ実行。
　　テーブル:_MIN = min．
　　//テーブル！作る。をして、その要素として値を書く必要がある
　「flag != "true"」！なら「
　　自分：分析結果！(配列！"最小値" (min) 作る) 書く．」実行．
　　ret=テーブル！((f1)+"_最小値") 作る。
　　ret!(min) 書く。
」。

テーブル：合計値＝「| f1 flag |
　　//fieldName＝_rest!getarg　1 読む。
　　//配列in配列＝自分！(fieldName)射影。
　　two_array＝自分！(f1) 射影。
　　data_array=配列！作る。
　　two_array！「｜n｜data_array！（n！１　読む）書く。」それぞれ実行。
　　sum=0.
　　data_array！「｜n｜
　　　　sum = sum + n。
　　」それぞれ実行。
　　//テーブル！作る。をして、その要素として値を書く必要がある．
　「flag != "true"」！なら「
　　自分：分析結果！(配列！"合計値" (sum) 作る) 書く．」実行．
　　ret=テーブル！((f1)+"_合計値") 作る。
　　ret!(配列！(sum) 作る) 書く。
」。

テーブル：平均値＝「| f1 flag |
　　//fieldName＝_rest!getarg　1 読む。
　　//配列in配列＝自分！(fieldName)射影。
　　two_array＝自分！(f1) 射影。
　　data_array=配列！作る。
　　two_array！「｜n｜data_array！（n！１　読む）書く。」それぞれ実行。
　　sum=0.
　　data_array！「｜n｜
　　　　sum = sum + n。
　　」それぞれ実行。
　　ave = sum / (data_array！要素数?)。
　　//テーブル！作る。をして、その要素として値を書く必要がある
　「flag != "true"」！なら「
　　自分：分析結果！(配列！"平均値" (ave) 作る) 書く．」実行．
　　ret=テーブル！((f1)+"_平均値") 作る。
　　ret!(ave) 書く。
」。

テーブル：分散＝「| f1 flag |
　//fieldName＝_rest!getarg　1 読む。
　//配列＝自分！(fieldName)射影。
　two_array＝自分！(f1) 射影。
　data_array=配列！作る。
　two_array！「｜n｜data_array！（n！１　読む）書く。」それぞれ実行。
　sum=0.
　dev=0.
　disp=0.
　data_array！「｜n｜
　　sum = sum + n。
　」それぞれ実行。
　ave = sum / (data_array！要素数?)。
　data_array！「｜n｜
　　dev = dev + (((n)-(ave))*((n)-(ave)))。
　」それぞれ実行。
　disp = dev/(data_array！要素数?)。
　//テーブル！作る。をして、その要素として値を書く必要がある
 「flag != "true"」！なら「
　自分：分析結果！(配列！"分散" (disp) 作る) 書く．」実行．
　ret=テーブル！((f1)+"_分散") 作る。
　ret!(disp) 書く。
		ret.
」。

テーブル：標準偏差＝「| f1 flag |
　　//fieldName＝_rest!getarg　1 読む。
　　sdev=0．
　　disp=0.
　　disp=自分！(f1) "true" 分散．
		//なんとかスマートにしたい
		　disp = disp!(1)読む.
		　disp = disp!(1)読む．
		　sdev=(sqrt ( disp ) ).
		「flag != "true"」！なら「
	 　自分：分析結果！(配列！"標準偏差" (sdev) 作る) 書く．」実行．
	 　ret=テーブル！((f1)+"_標準偏差") 作る。
　　ret!(sdev) 書く。
」．

テーブル：中央値＝「| f1 flag |
　　//fieldName＝_rest!getarg　1 読む。
　　tmp_arr＝自分！(f1)　大きい順。
　　two_arr＝tmp_arr！(f1)射影。
　　data_arr=配列！作る。
　　two_arr！「｜n｜data_arr！（n！１　読む）書く。」それぞれ実行。
   　 harf=(data_arr！要素数? )/2.
   　 tmp=data_arr！(harf)読む．
    　tmp2=data_arr！((harf)+1)読む．
	　「(harf)%2 !=0 」！なら「median=tmp」そうでなければ「median=(((tmp)+(tmp2))/2)」実行.
　　//テーブル！作る。をして、その要素として値を書く必要がある
　「flag != "true"」！なら「
　　自分：分析結果！(配列！"中央値" (median) 作る) 書く．」実行．
　　ret=テーブル！((f1)+"_中央値") 作る。
　　ret!(median) 書く。
」．

テーブル:第１四分位数＝「| f1 flag |
　//fieldName＝_rest!getarg　1 読む。
　tmp_arr＝自分！(f1)　小さい順。
　two_arr＝tmp_arr！(f1)射影。
　front_arr＝配列！作る。
		back_arr＝配列！作る．
　two_arr！「｜n m｜
　「((two_arr！要素数?)%2) == 0」!なら
　　「
　　　「(m) <=((two_arr！要素数?)/2)」！なら
　　　「front_arr! (n) 書く」そうでなければ
　　　「back_arr! (n) 書く」実行．
　　」そうでなければ
　　「
　　　「(m) <=((two_arr！要素数?)/2)」！なら
　　　「front_arr! (n) 書く」そうでなければ
　　　「(m) ==(((two_arr！要素数?)/2)+0.5)」なら「」そうでなければ
　　　「back_arr! (n) 書く」実行．
　　」実行．
　」それぞれ実行。

　uppar_arr＝テーブル！(f1) 作る．
　front_arr！「｜n｜
　　uppar_arr！(n)書く．
　」それぞれ実行．

  qua1 = uppar_arr! (f1) "true" 中央値．
　「flag != "true"」！なら「
　自分：分析結果！(配列！"第1四分位数" (((qua1)！1 読む)！1 読む) 作る) 書く．」実行．
　ret=テーブル！((f1)+"_第1四分位数") 作る。
　ret!(qua1) 連結。
」．

テーブル:第3四分位数＝「| f1 flag |
　//fieldName＝_rest!getarg　1 読む。
　tmp_arr＝自分！(f1)　小さい順。
　two_arr＝tmp_arr！(f1)射影。
　front_arr＝配列！作る。
　back_arr＝配列！作る．
　two_arr！「｜n m｜
		「((two_arr！要素数?)%2) == 0」!なら
		「
			「(m) <=((two_arr！要素数?)/2)」！なら
			「front_arr! (n) 書く」そうでなければ
			「back_arr! (n) 書く」実行．
			」そうでなければ
		「
			「(m) <=((two_arr！要素数?)/2)」！なら
			「front_arr! (n) 書く」そうでなければ
			「(m) ==(((two_arr！要素数?)/2)+0.5)」なら「」そうでなければ
			「back_arr! (n) 書く」実行．
			」実行．

	」それぞれ実行。

    lower_arr＝テーブル！(f1) 作る．
   	back_arr！「｜n｜
   		lower_arr！(n)書く．
   	」それぞれ実行．
  qua3 = lower_arr! (f1) "true" 中央値．
　「flag != "true"」！なら「
	自分：分析結果！(配列！"第3四分位数" (((qua3)！1 読む)！1 読む) 作る) 書く．」実行．
	ret=テーブル！((f1)+"_第3四分位数") 作る。
	ret!(qua3) 連結。
」．

テーブル：度数＝「｜カウントしたいフィールド名；文字コード配列にする 文字列にする　キー達　値達　ret｜
	キー達＝配列！作る。
	値達=配列！作る.
	ret=テーブル！(カウントしたいフィールド名)"度数"作る。
	カウントしたいフィールド名の番号＝０．

	文字コード配列にする＝「｜str;ret｜
		ret=配列！作る。
		str!""分割「｜要素｜
			ret!(要素！文字コード)書く。
		」それぞれ実行。
		ret
	」。
	文字列にする＝「｜文字コード配列;ret｜
		ret=""。
		文字コード配列！「｜要素｜
			ret＝（ret！（（要素）！コード文字）連結）。
		」それぞれ実行。
		ret
	」。

	キー達：探す＝「｜キー；結果　文字コード配列の比較｜
		結果＝０。

		文字コード配列の比較＝「｜左　右｜
			(""+左)==(""+右)
		」。

		「｜番号｜
			「！（自分！（番号）読む）（キー）文字コード配列の比較」！なら「結果＝番号」実行。
		」！（自分！要素数？）繰り返す。
		結果。
	」。

	「｜番号｜
		「（フィールド名！（番号）読む）＝＝カウントしたいフィールド名」！なら「
			カウントしたいフィールド名の番号＝番号。
		」実行。
	」！（フィールド名！要素数？）繰り返す。

	自分！「｜要素；値　キー番号｜
		値＝（！（要素！（カウントしたいフィールド名の番号）読む)文字コード配列にする）。
		「（キー達！（値）探す）＝＝０」！なら「キー達！（値）書く。値達！０　書く。」実行。
		キー番号＝キー達！（値）探す。
		値達！（キー番号）（（値達！（キー番号）読む）＋１）上書き。
	」それぞれ実行。

	キー達！「｜要素｜
		//ラベル！（！（要素）文字列にする）作る。
	」それぞれ実行。
	「｜番号｜
		ret!(！(キー達！（番号）読む)文字列にする）（値達！（番号）読む）書く。
	」！（キー達！要素数？）繰り返す。

	ret.
」。

//pro_list=projection_list
テーブル：レコード平均＝「
ダミー＝自分!create。
ダミー！クリア。
field_list = _rest!getarg.
pro_arr = 配列！作る。
tmp_arr = 配列！作る。
ave_arr = 配列 ! 作る。
_range = field_list!要素数？。
_count = 1.
_ave=0.
_sum=0.
field_list！「｜ｎ i｜　
	tmp_arr = 自分！ (n) 射影。
	「i !=1」!なら「
	　pro_arr!「| m o | m! (_count) ((tmp_arr! (o) 読む) ! 1 読む)挿入」それぞれ実行。
	」そうでなければ「
	　pro_arr = tmp_arr.
	」実行する。
	_count = (_count) + 1.
	」それぞれ実行。
	pro_arr!「| n |
	　n!「|n| _sum=(_sum)+(n)」それぞれ実行。
	　_ave = (_sum)/(_range).
	　_sum = 0.
	　ave_arr!(round(_ave)) 書く。
	 」それぞれ実行。
	 自分！「｜要素｜
			ダミー！（要素！作る）put。
		」それぞれ実行。
	(ダミー：フィールド名)! "平均"　書く。
	 ave_arr！「| n i |　
	 　(ダミー！(i) 読む)! (n) put。
	 」それぞれ実行。
	 ダミー。
」。
